# Lockin.tech Admin API Documentation

## Overview

This document describes the admin endpoints for the Lockin.tech backend. These endpoints are restricted to users with admin or owner roles and provide full control over user management and content.

**For regular user endpoints, see**: `backend_documentation.txt`

```
backend_url = https://backend.lockin.tech
```

---

## Role System

### User (default)
- Access to all `/fetch/*` and `/update/*` endpoints
- Can view and manage their own profile
- No admin access

### Admin
- Access to all `/admin/*` content management endpoints
- Can view all users and update basic user fields (year, email_verified)
- Can reset user passwords
- Can delete regular user accounts
- **CANNOT** change user roles (no promotion/demotion)
- **CANNOT** manage other admins or owners

### Owner
- All admin permissions
- **CAN** promote users to admin
- **CAN** demote admins to user
- **CAN** reset any user's password including admins
- **CANNOT** be demoted (role is permanent)
- **CANNOT** change other owners' roles

---

## Authentication

All admin endpoints require a valid session token from a user with admin or owner role.

**Token Verification**:
- Tokens are validated using the same session system as regular endpoints
- Additional role check ensures user has `role='admin'` or `role='owner'`
- Returns 403 Forbidden if user lacks required permissions

**Owner-Only Endpoints**:
- `/admin/users/promote` - Promote user to admin
- `/admin/users/demote` - Demote admin to user

---

## Admin User Management Endpoints

### 1. List All Users

**Endpoint**: `POST /admin/users`

**Auth**: Admin or Owner

**Description**: List all users with optional filters and pagination. Includes user statistics like enrollment counts.

**Request Body**:
```json
{
  "token": "session_token",
  "role": "user|admin|owner",  // Optional: filter by role
  "year_id": "uuid",            // Optional: filter by year
  "search": "search_term",      // Optional: search username/email (case-insensitive)
  "limit": 50,                  // Optional: results per page (default 50, max 200)
  "offset": 0                   // Optional: pagination offset (default 0)
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Users fetched successfully",
  "data": {
    "users": [
      {
        "id": "uuid",
        "username": "john_doe",
        "email": "john@example.com",
        "email_verified": false,
        "role": "user",
        "year_id": "uuid",
        "year_name": "GCSE (10/11)",
        "profile_picture_url": "default",
        "created_at": "2025-10-01T12:00:00.000000",
        "enrolled_courses_count": 3
      }
    ],
    "count": 50,
    "limit": 50,
    "offset": 0,
    "total": 152
  }
}
```

**Error Cases**:
- Missing token (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Server error (500)

**Usage Examples**:

```javascript
// List first 50 users
const response = await fetch(`${backend_url}/admin/users`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ token: adminToken })
});

// Filter by role
const admins = await fetch(`${backend_url}/admin/users`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    role: 'admin'
  })
});

// Search users
const searchResults = await fetch(`${backend_url}/admin/users`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    search: 'john',
    limit: 20
  })
});

// Pagination
const page2 = await fetch(`${backend_url}/admin/users`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    limit: 50,
    offset: 50
  })
});
```

```bash
# cURL: List all users
curl -X POST ${backend_url}/admin/users \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token"}'

# Filter by role
curl -X POST ${backend_url}/admin/users \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "role": "user"}'

# Search and pagination
curl -X POST ${backend_url}/admin/users \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "search": "john", "limit": 20, "offset": 0}'
```

---

### 2. Get Single User Details

**Endpoint**: `POST /admin/users/get`

**Auth**: Admin or Owner

**Description**: Get detailed information about a specific user, including their profile, year, and enrolled courses.

**Request Body**:
```json
{
  "token": "session_token",
  "user_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "User profile fetched successfully",
  "data": {
    "user": {
      "id": "uuid",
      "username": "john_doe",
      "email": "john@example.com",
      "email_verified": false,
      "role": "user",
      "profile_picture_url": "default",
      "created_at": "2025-10-01T12:00:00.000000"
    },
    "year": {
      "id": "uuid",
      "name": "GCSE (10/11)",
      "sort_order": 1,
      "created_at": "2025-01-01T00:00:00.000000"
    },
    "courses": [
      {
        "id": "uuid",
        "title": "AQA Biology",
        "description": "GCSE Biology course",
        "link_to_specification": "https://...",
        "created_at": "2025-01-01T00:00:00.000000",
        "enrollment_date": "2025-10-01T12:30:00.000000",
        "year_id": "uuid",
        "subject": {
          "id": "uuid",
          "name": "Biology",
          "code": "BIO",
          "created_at": "2025-01-01T00:00:00.000000"
        }
      }
    ],
    "courses_count": 1
  }
}
```

**Error Cases**:
- Missing token or user_id (400)
- Invalid user_id format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- User not found (404)
- Server error (500)

**Usage Examples**:

```javascript
// Get user details
const response = await fetch(`${backend_url}/admin/users/get`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid-here'
  })
});
```

```bash
# cURL
curl -X POST ${backend_url}/admin/users/get \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "user_id": "user-uuid"}'
```

---

### 3. Update User Details

**Endpoint**: `PUT /admin/users/update`

**Auth**: Admin or Owner (with restrictions)

**Description**: Update user's year or email verification status. Cannot update username, email, password, or role through this endpoint.

**Restrictions**:
- Admins can only update regular users
- Owners can update anyone except other owners
- Cannot update roles (use promote/demote endpoints)
- Cannot update username/email/password

**Request Body**:
```json
{
  "token": "session_token",
  "user_id": "uuid",
  "year_id": "uuid",           // Optional: set to null to unset the year
  "email_verified": true       // Optional
}
```

**Note**: At least one field to update must be provided. Set `year_id` to `null` to remove the user's year assignment.

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "User updated successfully",
  "data": {
    "user": {
      "id": "uuid",
      "username": "john_doe",
      "email": "john@example.com",
      "email_verified": true,
      "role": "user",
      "year_id": "uuid",
      "year_name": "A-Level (12/13)",
      "profile_picture_url": "default",
      "created_at": "2025-10-01T12:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or user_id (400)
- No fields to update provided (400)
- Invalid user_id or year_id format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Admin trying to update admin/owner (403)
- Owner trying to update another owner (403)
- User not found (404)
- Year not found or inactive (404)
- Server error (500)

**Usage Examples**:

```javascript
// Update user's year
const response = await fetch(`${backend_url}/admin/users/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid',
    year_id: 'new-year-uuid'
  })
});

// Verify user's email
const verifyEmail = await fetch(`${backend_url}/admin/users/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid',
    email_verified: true
  })
});

// Update both year and email verification
const updateBoth = await fetch(`${backend_url}/admin/users/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid',
    year_id: 'year-uuid',
    email_verified: true
  })
});

// Unset user's year (set to null)
const unsetYear = await fetch(`${backend_url}/admin/users/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid',
    year_id: null
  })
});
```

```bash
# cURL: Update year
curl -X PUT ${backend_url}/admin/users/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "user_id": "user-uuid", "year_id": "year-uuid"}'

# Verify email
curl -X PUT ${backend_url}/admin/users/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "user_id": "user-uuid", "email_verified": true}'

# Unset user's year
curl -X PUT ${backend_url}/admin/users/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "user_id": "user-uuid", "year_id": null}'
```

---

### 4. Promote User to Admin

**Endpoint**: `PUT /admin/users/promote`

**Auth**: Owner ONLY

**Description**: Promote a regular user to admin role. Only owners can promote users.

**Restrictions**:
- User must have role='user'
- Cannot promote admin (already admin)
- Cannot promote owner

**Request Body**:
```json
{
  "token": "session_token",
  "user_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "User 'john_doe' promoted to admin successfully",
  "data": {
    "user": {
      "id": "uuid",
      "username": "john_doe",
      "email": "john@example.com",
      "role": "admin",
      "created_at": "2025-10-01T12:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or user_id (400)
- Invalid user_id format (400)
- User already admin or owner (400)
- Invalid/expired token (401)
- Not owner (403)
- User not found (404)
- Server error (500)

**Usage Examples**:

```javascript
// Promote user to admin
const response = await fetch(`${backend_url}/admin/users/promote`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: ownerToken,
    user_id: 'user-uuid'
  })
});
```

```bash
# cURL
curl -X PUT ${backend_url}/admin/users/promote \
  -H "Content-Type: application/json" \
  -d '{"token": "your_owner_token", "user_id": "user-uuid"}'
```

---

### 5. Demote Admin to User

**Endpoint**: `PUT /admin/users/demote`

**Auth**: Owner ONLY

**Description**: Demote an admin to regular user role. Only owners can demote admins.

**Restrictions**:
- User must have role='admin'
- Cannot demote owner (owners are permanent)
- Cannot demote regular user (already user)
- Cannot demote yourself

**Request Body**:
```json
{
  "token": "session_token",
  "user_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Admin 'john_doe' demoted to user successfully",
  "data": {
    "user": {
      "id": "uuid",
      "username": "john_doe",
      "email": "john@example.com",
      "role": "user",
      "created_at": "2025-10-01T12:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or user_id (400)
- Invalid user_id format (400)
- User is not admin (400)
- Trying to demote owner (400)
- Trying to demote yourself (400)
- Invalid/expired token (401)
- Not owner (403)
- User not found (404)
- Server error (500)

**Usage Examples**:

```javascript
// Demote admin to user
const response = await fetch(`${backend_url}/admin/users/demote`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: ownerToken,
    user_id: 'admin-uuid'
  })
});
```

```bash
# cURL
curl -X PUT ${backend_url}/admin/users/demote \
  -H "Content-Type: application/json" \
  -d '{"token": "your_owner_token", "user_id": "admin-uuid"}'
```

---

### 6. Reset User Password

**Endpoint**: `PUT /admin/users/reset_password`

**Auth**: Admin or Owner

**Description**: Reset a user's password to a secure temporary password. All existing sessions for the user are invalidated.

**Request Body**:
```json
{
  "token": "session_token",
  "user_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Password reset successfully for user 'john_doe'",
  "data": {
    "user_id": "uuid",
    "username": "john_doe",
    "email": "john@example.com",
    "temporary_password": "aB3$xY9#mP2Q",
    "note": "This password should be securely sent to the user. All existing sessions have been invalidated."
  }
}
```

**Temporary Password**:
- 12 characters long
- Contains uppercase letters, lowercase letters, digits, and special characters
- Meets all password complexity requirements
- Secure random generation using `secrets` module

**Security Notes**:
- All existing sessions for the user are immediately invalidated
- User must login with temporary password
- Temporary password should be sent to user through secure channel
- User should change password after logging in

**Error Cases**:
- Missing token or user_id (400)
- Invalid user_id format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- User not found (404)
- Server error (500)

**Usage Examples**:

```javascript
// Reset user password
const response = await fetch(`${backend_url}/admin/users/reset_password`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid'
  })
});

const data = await response.json();
if (data.success) {
  const tempPassword = data.data.temporary_password;
  // Send tempPassword to user via email or other secure method
  console.log(`Send this password to user: ${tempPassword}`);
}
```

```bash
# cURL
curl -X PUT ${backend_url}/admin/users/reset_password \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "user_id": "user-uuid"}'
```

---

### 7. Delete User Account

**Endpoint**: `DELETE /admin/users/delete`

**Auth**: Admin or Owner (with restrictions)

**Description**: Permanently delete a user account from the database. This action cascades to related records.

**Restrictions**:
- Admins can only delete regular users
- Owners can delete users and admins, but not other owners
- Cannot delete yourself
- Cannot delete owners (role is permanent)

**Request Body**:
```json
{
  "token": "session_token",
  "user_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "User 'john_doe' deleted successfully",
  "data": {
    "user_id": "uuid",
    "username": "john_doe",
    "note": "User account has been permanently deleted. Sessions and enrollments were also removed."
  }
}
```

**Implementation Notes**:
- **Permanently deletes** user record from database
- **Automatically deleted** (CASCADE): sessions, course_enrollments
- **Creator references nullified** (SET NULL): Any content they created (courses, notes, questions, podcasts, papers, topics, past_papers) will have `added_by_user_id` set to NULL
- Content they created remains in the system but loses creator attribution
- This is a **permanent** action and cannot be easily reversed

**Error Cases**:
- Missing token or user_id (400)
- Invalid user_id format (400)
- Trying to delete yourself (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Admin trying to delete admin/owner (403)
- Trying to delete owner (403)
- User not found (404)
- Server error (500)

**Usage Examples**:

```javascript
// Delete user account
const response = await fetch(`${backend_url}/admin/users/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    user_id: 'user-uuid'
  })
});

const data = await response.json();
if (data.success) {
  console.log(`User permanently deleted from database.`);
}
```

```bash
# cURL
curl -X DELETE ${backend_url}/admin/users/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "user_id": "user-uuid"}'
```

---

## Admin Years Management Endpoints

### 1. List All Years

**Endpoint**: `POST /admin/years`

**Auth**: Admin or Owner

**Description**: List all years with full details, including inactive years. This is the admin version that shows all years regardless of status.

**Request Body**:
```json
{
  "token": "session_token",
  "include_inactive": true  // Optional: default true, set false to show only active years
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Years fetched successfully",
  "data": {
    "years": [
      {
        "id": "uuid",
        "name": "GCSE (10/11)",
        "sort_order": 1,
        "is_active": true,
        "created_at": "2025-01-01T00:00:00.000000"
      }
    ],
    "count": 2
  }
}
```

**Error Cases**:
- Missing token (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Server error (500)

**Usage Examples**:

```javascript
// List all years (including inactive)
const response = await fetch(`${backend_url}/admin/years`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ token: adminToken })
});

// List only active years
const activeYears = await fetch(`${backend_url}/admin/years`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    include_inactive: false
  })
});
```

```bash
# cURL: List all years
curl -X POST ${backend_url}/admin/years \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token"}'

# List only active years
curl -X POST ${backend_url}/admin/years \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "include_inactive": false}'
```

---

### 2. Create Year

**Endpoint**: `POST /admin/years/create`

**Auth**: Admin or Owner

**Description**: Create a new year. The year will be active by default.

**Request Body**:
```json
{
  "token": "session_token",
  "name": "GCSE (10/11)",
  "sort_order": 1  // Optional: default 0
}
```

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Year 'GCSE (10/11)' created successfully",
  "data": {
    "year": {
      "id": "uuid",
      "name": "GCSE (10/11)",
      "sort_order": 1,
      "is_active": true,
      "created_at": "2025-10-28T10:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or name (400)
- Invalid name format (400)
- Invalid sort_order (must be integer) (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Year name already exists (409)
- Server error (500)

**Usage Examples**:

```javascript
// Create new year
const response = await fetch(`${backend_url}/admin/years/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    name: 'A-Level (12/13)',
    sort_order: 2
  })
});
```

```bash
# cURL
curl -X POST ${backend_url}/admin/years/create \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "name": "A-Level (12/13)", "sort_order": 2}'
```

---

### 3. Update Year

**Endpoint**: `PUT /admin/years/update`

**Auth**: Admin or Owner

**Description**: Update year details. Can update name, sort_order, and/or is_active status.

**Request Body**:
```json
{
  "token": "session_token",
  "year_id": "uuid",
  "name": "Updated Name",      // Optional
  "sort_order": 5,             // Optional
  "is_active": false           // Optional
}
```

**Note**: At least one field to update must be provided.

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Year updated successfully",
  "data": {
    "year": {
      "id": "uuid",
      "name": "Updated Name",
      "sort_order": 5,
      "is_active": true,
      "created_at": "2025-01-01T00:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or year_id (400)
- No fields to update provided (400)
- Invalid year_id format (400)
- Invalid sort_order (must be integer) (400)
- Invalid is_active (must be boolean) (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Year not found (404)
- Year name already exists (409)
- Server error (500)

**Usage Examples**:

```javascript
// Update year name
const response = await fetch(`${backend_url}/admin/years/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    name: 'New Year Name'
  })
});

// Update sort order
const updateSort = await fetch(`${backend_url}/admin/years/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    sort_order: 10
  })
});

// Reactivate inactive year
const reactivate = await fetch(`${backend_url}/admin/years/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    is_active: true
  })
});
```

```bash
# cURL: Update name
curl -X PUT ${backend_url}/admin/years/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid", "name": "New Name"}'

# Update multiple fields
curl -X PUT ${backend_url}/admin/years/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid", "name": "New Name", "sort_order": 15}'
```

---

### 4. Delete Year

**Endpoint**: `DELETE /admin/years/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for years. First call deactivates (soft delete), second call permanently removes from database.

**Request Body**:
```json
{
  "token": "session_token",
  "year_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Year 'GCSE (10/11)' deactivated successfully",
  "data": {
    "year_id": "uuid",
    "name": "GCSE (10/11)",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Year 'GCSE (10/11)' permanently removed from database",
  "data": {
    "year_id": "uuid",
    "name": "GCSE (10/11)",
    "note": "Year has been permanently deleted from the database. This action cannot be reversed."
  }
}
```

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- Users with this year_id retain their assignment after soft delete
- Can be reactivated after soft delete using update endpoint
- After permanent delete, year no longer exists in database

**Error Cases**:
- Missing token or year_id (400)
- Invalid year_id format (400)
- Year already inactive (400) - first call only
- Invalid/expired token (401)
- Not admin or owner (403)
- Year not found (404)
- Server error (500)

**Usage Examples**:

```javascript
// First call - Soft delete (deactivate)
const response1 = await fetch(`${backend_url}/admin/years/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid'
  })
});
// Returns: is_active = false, with note to call again

// Second call - Permanent delete
const response2 = await fetch(`${backend_url}/admin/years/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid'
  })
});
// Returns: confirmation of permanent deletion

// Recovery (before second call)
const recover = await fetch(`${backend_url}/admin/years/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    is_active: true
  })
});
```

```bash
# cURL - First delete (soft)
curl -X DELETE ${backend_url}/admin/years/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid"}'

# cURL - Second delete (permanent)
curl -X DELETE ${backend_url}/admin/years/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid"}'
```

---

## Common Response Formats

### Success Response
```json
{
  "success": true,
  "message": "Operation successful",
  "data": { /* endpoint-specific data */ }
}
```

### Error Response
```json
{
  "success": false,
  "message": "Error description"
}
```

### HTTP Status Codes

- **200 OK**: Request successful
- **400 Bad Request**: Missing required fields, invalid input, or validation error
- **401 Unauthorized**: Invalid or expired token
- **403 Forbidden**: Valid token but insufficient permissions (not admin/owner)
- **404 Not Found**: Resource not found (user, year, etc.)
- **500 Internal Server Error**: Server-side error

---

## Security Features

### Role-Based Access Control
- All endpoints verify admin or owner role
- Owner-only endpoints (promote/demote) have additional checks
- Permission hierarchies strictly enforced

### Permission Restrictions
- Admins cannot modify other admins or owners
- Owners cannot modify other owners
- Self-modification protections (cannot delete/demote yourself)
- Owner role is permanent and cannot be changed

### Audit Trail
- All operations track which admin performed them
- User creation/modification timestamps maintained
- Session invalidation logged

### Data Validation
- All inputs sanitized before processing
- UUID format validation
- Role validation (only valid roles accepted)
- Year existence and active status verified

### Session Security
- Password resets invalidate all existing sessions
- User deletion invalidates all sessions
- Token expiration enforced (7 days)

---

## Two-Stage Delete Behavior

### Overview

All content management endpoints with `is_active` fields implement a **two-stage delete process** to prevent accidental permanent data loss. This safety mechanism requires two explicit delete calls to permanently remove data.

### How It Works

**Stage 1: Soft Delete (First Delete Call)**
- Sets `is_active = false` in the database
- Record remains in the database and can be recovered
- Returns the updated record with `is_active: false`
- Includes a note: "Call delete again to permanently remove from database"
- Can be reversed by calling the update endpoint with `is_active: true`

**Stage 2: Permanent Delete (Second Delete Call)**
- Only works if `is_active = false` (must be deactivated first)
- Permanently removes the record using `DELETE FROM table`
- Returns success message indicating permanent removal
- Cannot be reversed - data is gone forever
- May cascade to related records depending on foreign key constraints

**Stage 3: Subsequent Calls**
- Return 404 Not Found (record no longer exists in database)

### Example Flow

```javascript
// First delete call - Soft delete
const response1 = await fetch(`${backend_url}/admin/years/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid'
  })
});
// Response: { success: true, data: { is_active: false, note: "Call delete again..." } }

// Second delete call - Permanent delete
const response2 = await fetch(`${backend_url}/admin/years/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid'
  })
});
// Response: { success: true, message: "...permanently removed from database" }

// Third delete call - Not found
const response3 = await fetch(`${backend_url}/admin/years/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid'
  })
});
// Response: { success: false, message: "Year not found" } (404)
```

### Applicable Endpoints

Two-stage delete applies to these endpoints:

✅ **Years** - `/admin/years/delete`
✅ **Subjects** - `/admin/subjects/delete`
✅ **Courses** - `/admin/courses/delete` (cascades to papers/topics on permanent delete)
✅ **Topics** - `/admin/topics/delete` (cascades to notes/questions/podcasts on permanent delete)
✅ **Notes** - `/admin/notes/delete`
✅ **Podcasts** - `/admin/podcasts/delete`
✅ **Past Papers** - `/admin/past_papers/delete`

### Excluded Endpoints

❌ **Papers** (`/admin/papers/delete`):
- No `is_active` field in database schema
- Implements hard delete only (single call)
- Cascades to topics (ON DELETE CASCADE)

❌ **Users** (`/admin/users/delete`):
- Different permission model (role-based)
- Permanent delete only (single call)
- Role-based restrictions apply

### Recovery Process

If a record is soft-deleted (Stage 1) but not permanently deleted:

```javascript
// Recover a soft-deleted record using update endpoint
const response = await fetch(`${backend_url}/admin/years/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    is_active: true  // Reactivate
  })
});
```

### Testing

**Comprehensive Test Suite**: `/tests/test_admin_two_stage_delete.py`

**Coverage**:
- Tests all 7 applicable endpoints
- Verifies soft delete → permanent delete → 404 flow
- Validates correct messages and response formats
- All 25 tests passing ✓

**Run Tests**:
```bash
python3 tests/test_admin_two_stage_delete.py
```

### Benefits

1. **Prevents Accidental Deletion**: Requires explicit confirmation via second call
2. **Reversible First Stage**: Soft-deleted records can be recovered
3. **Clear Feedback**: Messages guide admin through the process
4. **Consistent Pattern**: Same behavior across all content endpoints
5. **Safety Net**: Reduces risk of data loss from misclicks or errors

---

## Implementation Notes

### Pagination
- Default limit: 50 users per page
- Maximum limit: 200 users per page
- Use `offset` for page navigation
- Total count provided for UI pagination

### Search Functionality
- Searches across username and email fields
- Case-insensitive ILIKE search
- Partial matching supported
- Can combine with role and year filters

### Role Management
- Promote: user → admin (owner only)
- Demote: admin → user (owner only)
- Owner role cannot be assigned or removed via API
- Role changes are immediate (no confirmation required)

### Password Reset
- Generates cryptographically secure 12-character password
- Meets all complexity requirements automatically
- Invalidates all sessions immediately
- Returns password in response (send to user securely)

### User Deletion
- Permanent deletion (user record removed from database)
- Automatically cascades to sessions and course enrollments
- Content creator references are nullified (content preserved)
- Cannot be reversed - this is a permanent action

---

## Admin Subjects Management Endpoints

### 1. List All Subjects

**Endpoint**: `POST /admin/subjects`

**Auth**: Admin or Owner

**Description**: List all subjects in the system. By default, only active subjects are returned. Subjects are sorted alphabetically by name.

**Request Body**:
```json
{
  "token": "session_token",
  "include_inactive": false  // Optional: include inactive subjects (default false)
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Subjects fetched successfully",
  "data": {
    "subjects": [
      {
        "id": "uuid",
        "name": "Mathematics",
        "code": "MATH",
        "is_active": true,
        "created_at": "2025-01-01T00:00:00.000000"
      },
      {
        "id": "uuid",
        "name": "Physics",
        "code": null,
        "is_active": true,
        "created_at": "2025-01-02T00:00:00.000000"
      }
    ],
    "count": 2
  }
}
```

**Error Cases**:
- Missing token (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Server error (500)

**Database Optimization**: Single query with optional WHERE clause (1 DB trip)

**Usage Examples**:

```javascript
// List active subjects
const response = await fetch(`${backend_url}/admin/subjects`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ token: adminToken })
});

// List all subjects including inactive
const allSubjects = await fetch(`${backend_url}/admin/subjects`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    include_inactive: true
  })
});
```

```bash
# cURL - list active subjects
curl -X POST ${backend_url}/admin/subjects \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token"}'

# cURL - list all subjects
curl -X POST ${backend_url}/admin/subjects \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "include_inactive": true}'
```

---

### 2. Create Subject

**Endpoint**: `POST /admin/subjects/create`

**Auth**: Admin or Owner

**Description**: Create a new subject. Subject name is required and must be unique. Code is optional.

**Request Body**:
```json
{
  "token": "session_token",
  "name": "Biology",
  "code": "BIO"  // Optional
}
```

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Subject 'Biology' created successfully",
  "data": {
    "subject": {
      "id": "uuid",
      "name": "Biology",
      "code": "BIO",
      "is_active": true,
      "created_at": "2025-10-28T10:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or name (400)
- Invalid name format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Subject name already exists (409)
- Server error (500)

**Database Optimization**: Duplicate check + insert with RETURNING (2 DB trips)

**Usage Examples**:

```javascript
// Create subject with code
const response = await fetch(`${backend_url}/admin/subjects/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    name: 'Chemistry',
    code: 'CHEM'
  })
});

// Create subject without code
const simple = await fetch(`${backend_url}/admin/subjects/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    name: 'Computer Science'
  })
});
```

```bash
# cURL - with code
curl -X POST ${backend_url}/admin/subjects/create \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "name": "Chemistry", "code": "CHEM"}'

# cURL - without code
curl -X POST ${backend_url}/admin/subjects/create \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "name": "Computer Science"}'
```

---

### 3. Update Subject

**Endpoint**: `PUT /admin/subjects/update`

**Auth**: Admin or Owner

**Description**: Update subject details. Can update name, code, and/or is_active status. Set code to null to remove it.

**Request Body**:
```json
{
  "token": "session_token",
  "subject_id": "uuid",
  "name": "Updated Name",      // Optional
  "code": "NEW",               // Optional (set to null to remove)
  "is_active": false           // Optional
}
```

**Note**: At least one field to update must be provided.

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Subject updated successfully",
  "data": {
    "subject": {
      "id": "uuid",
      "name": "Updated Name",
      "code": "NEW",
      "is_active": true,
      "created_at": "2025-01-01T00:00:00.000000"
    }
  }
}
```

**Error Cases**:
- Missing token or subject_id (400)
- No fields to update provided (400)
- Invalid subject_id format (400)
- Invalid is_active (must be boolean) (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Subject not found (404)
- Subject name already exists (409)
- Server error (500)

**Database Optimization**: Combined validation query + UPDATE...RETURNING (2 DB trips)

**Usage Examples**:

```javascript
// Update subject name
const response = await fetch(`${backend_url}/admin/subjects/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid',
    name: 'New Subject Name'
  })
});

// Update code
const updateCode = await fetch(`${backend_url}/admin/subjects/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid',
    code: 'NEWSUB'
  })
});

// Remove code (set to null)
const removeCode = await fetch(`${backend_url}/admin/subjects/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid',
    code: null
  })
});

// Reactivate inactive subject
const reactivate = await fetch(`${backend_url}/admin/subjects/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid',
    is_active: true
  })
});
```

```bash
# cURL - update name
curl -X PUT ${backend_url}/admin/subjects/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "subject_id": "uuid", "name": "New Name"}'

# cURL - remove code
curl -X PUT ${backend_url}/admin/subjects/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "subject_id": "uuid", "code": null}'
```

---

### 4. Delete Subject

**Endpoint**: `DELETE /admin/subjects/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for subjects. First call deactivates (soft delete), second call permanently removes from database.

**Request Body**:
```json
{
  "token": "session_token",
  "subject_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Subject 'Biology' deactivated successfully",
  "data": {
    "subject_id": "uuid",
    "name": "Biology",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Subject 'Biology' permanently removed from database",
  "data": {
    "subject_id": "uuid",
    "name": "Biology",
    "note": "Subject has been permanently deleted from the database. This action cannot be reversed."
  }
}
```

**Error Cases**:
- Missing token or subject_id (400)
- Subject already inactive (400) - first call only
- Invalid subject_id format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Subject not found (404)
- Server error (500)

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- Can be reactivated after soft delete using update endpoint
- After permanent delete, subject no longer exists in database

**Usage Examples**:

```javascript
// First call - Soft delete
const response1 = await fetch(`${backend_url}/admin/subjects/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid'
  })
});

// Second call - Permanent delete
const response2 = await fetch(`${backend_url}/admin/subjects/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid'
  })
});
```

```bash
# cURL - First delete
curl -X DELETE ${backend_url}/admin/subjects/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "subject_id": "uuid"}'

# cURL - Second delete
curl -X DELETE ${backend_url}/admin/subjects/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "subject_id": "uuid"}'
```

---

## Admin Courses Management Endpoints

### 1. List All Courses

**Endpoint**: `POST /admin/courses`

**Auth**: Admin or Owner

**Description**: List all courses with optional filters (year, subject, include_inactive). Courses include year and subject information.

**Request Body**:
```json
{
  "token": "session_token",
  "year_id": "uuid",  // Optional: filter by year
  "subject_id": "uuid",  // Optional: filter by subject
  "include_inactive": false  // Optional: include inactive courses (default false)
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Courses fetched successfully",
  "data": {
    "courses": [
      {
        "id": "uuid",
        "year_id": "uuid",
        "year_name": "GCSE (10/11)",
        "subject_id": "uuid",
        "subject_name": "Mathematics",
        "subject_code": "MATH",
        "title": "GCSE Mathematics Higher Tier",
        "description": "Higher tier mathematics course",
        "link_to_specification": "https://example.com/spec",
        "is_active": true,
        "created_at": "2025-01-01T00:00:00.000000",
        "created_by_user_id": "uuid"
      }
    ],
    "count": 1
  }
}
```

**Error Cases**:
- Missing token (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Server error (500)

**Database Optimization**: Single query with LEFT JOINs and dynamic WHERE clause (1 DB trip)

**Usage Examples**:

```javascript
// List all active courses
const response = await fetch(`${backend_url}/admin/courses`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ token: adminToken })
});

// List courses for specific year
const yearCourses = await fetch(`${backend_url}/admin/courses`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid'
  })
});

// List courses for specific subject
const subjectCourses = await fetch(`${backend_url}/admin/courses`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    subject_id: 'subject-uuid'
  })
});

// List all courses including inactive
const allCourses = await fetch(`${backend_url}/admin/courses`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    include_inactive: true
  })
});
```

```bash
# cURL - list active courses
curl -X POST ${backend_url}/admin/courses \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token"}'

# cURL - filter by year
curl -X POST ${backend_url}/admin/courses \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid"}'
```

---

### 2. Get Single Course

**Endpoint**: `POST /admin/courses/get`

**Auth**: Admin or Owner

**Description**: Get detailed information for a single course including statistics (papers count, topics count, enrollments count).

**Request Body**:
```json
{
  "token": "session_token",
  "course_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Course fetched successfully",
  "data": {
    "course": {
      "id": "uuid",
      "year_id": "uuid",
      "year_name": "GCSE (10/11)",
      "year_sort_order": 1,
      "subject_id": "uuid",
      "subject_name": "Mathematics",
      "subject_code": "MATH",
      "title": "GCSE Mathematics Higher Tier",
      "description": "Higher tier mathematics course",
      "link_to_specification": "https://example.com/spec",
      "is_active": true,
      "created_at": "2025-01-01T00:00:00.000000",
      "created_by_user_id": "uuid",
      "stats": {
        "papers_count": 3,
        "topics_count": 25,
        "enrollments_count": 150
      }
    }
  }
}
```

**Error Cases**:
- Missing token or course_id (400)
- Invalid course_id format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Course not found (404)
- Server error (500)

**Database Optimization**: Single query with JOINs and GROUP BY for aggregations (1 DB trip)

**Usage Examples**:

```javascript
// Get course details
const response = await fetch(`${backend_url}/admin/courses/get`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid'
  })
});
```

```bash
# cURL
curl -X POST ${backend_url}/admin/courses/get \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "course_id": "uuid"}'
```

---

### 3. Create Course

**Endpoint**: `POST /admin/courses/create`

**Auth**: Admin or Owner

**Description**: Create a new course. Requires both year_id and subject_id. Course title must be unique within the same year and subject combination.

**Request Body**:
```json
{
  "token": "session_token",
  "year_id": "uuid",
  "subject_id": "uuid",
  "title": "GCSE Mathematics Higher Tier",
  "description": "Higher tier mathematics course",  // Optional
  "link_to_specification": "https://example.com/spec"  // Optional
}
```

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Course 'GCSE Mathematics Higher Tier' created successfully",
  "data": {
    "course": {
      "id": "uuid",
      "year_id": "uuid",
      "subject_id": "uuid",
      "title": "GCSE Mathematics Higher Tier",
      "description": "Higher tier mathematics course",
      "link_to_specification": "https://example.com/spec",
      "is_active": true,
      "created_at": "2025-10-28T10:00:00.000000",
      "created_by_user_id": "uuid"
    }
  }
}
```

**Error Cases**:
- Missing token, year_id, subject_id, or title (400)
- Invalid format for year_id, subject_id, or title (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Year not found or inactive (404)
- Subject not found or inactive (404)
- Course title already exists for this year/subject (409)
- Server error (500)

**Database Optimization**: Combined validation query + insert with RETURNING (2 DB trips)
- Trip 1: Single query checks year exists, subject exists, and no duplicate
- Trip 2: INSERT...RETURNING

**Usage Examples**:

```javascript
// Create course with full details
const response = await fetch(`${backend_url}/admin/courses/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    subject_id: 'subject-uuid',
    title: 'GCSE Mathematics Higher Tier',
    description: 'Higher tier mathematics course',
    link_to_specification: 'https://example.com/spec'
  })
});

// Create minimal course (without optional fields)
const minimal = await fetch(`${backend_url}/admin/courses/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    year_id: 'year-uuid',
    subject_id: 'subject-uuid',
    title: 'Basic Chemistry'
  })
});
```

```bash
# cURL - full details
curl -X POST ${backend_url}/admin/courses/create \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid", "subject_id": "subject-uuid", "title": "GCSE Mathematics", "description": "Math course", "link_to_specification": "https://example.com/spec"}'

# cURL - minimal
curl -X POST ${backend_url}/admin/courses/create \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "year_id": "year-uuid", "subject_id": "subject-uuid", "title": "Basic Chemistry"}'
```

---

### 4. Update Course

**Endpoint**: `PUT /admin/courses/update`

**Auth**: Admin or Owner

**Description**: Update course details (title, description, link_to_specification, or is_active status). At least one field must be provided.

**Request Body**:
```json
{
  "token": "session_token",
  "course_id": "uuid",
  "title": "New Title",  // Optional
  "description": "New description",  // Optional
  "link_to_specification": "https://...",  // Optional (set to null to unset)
  "is_active": true  // Optional
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Course updated successfully",
  "data": {
    "course": {
      "id": "uuid",
      "year_id": "uuid",
      "subject_id": "uuid",
      "title": "New Title",
      "description": "New description",
      "link_to_specification": "https://...",
      "is_active": true,
      "created_at": "2025-01-01T00:00:00.000000",
      "created_by_user_id": "uuid"
    }
  }
}
```

**Error Cases**:
- Missing token or course_id (400)
- No fields to update provided (400)
- Invalid course_id format (400)
- Invalid is_active (must be boolean) (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Course not found (404)
- Course title already exists for this year/subject (409)
- Server error (500)

**Database Optimization**: Combined validation + UPDATE...RETURNING (2 DB trips)
- Trip 1: Check course exists and if updating title, check for duplicates
- Trip 2: UPDATE...RETURNING

**Usage Examples**:

```javascript
// Update title
const response = await fetch(`${backend_url}/admin/courses/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid',
    title: 'Updated Course Title'
  })
});

// Update description
const updateDesc = await fetch(`${backend_url}/admin/courses/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid',
    description: 'Updated description'
  })
});

// Unset link_to_specification
const removeLink = await fetch(`${backend_url}/admin/courses/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid',
    link_to_specification: null
  })
});

// Reactivate inactive course
const reactivate = await fetch(`${backend_url}/admin/courses/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid',
    is_active: true
  })
});
```

```bash
# cURL - update title
curl -X PUT ${backend_url}/admin/courses/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "course_id": "uuid", "title": "New Title"}'

# cURL - unset link
curl -X PUT ${backend_url}/admin/courses/update \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "course_id": "uuid", "link_to_specification": null}'
```

---

### 5. Delete Course

**Endpoint**: `DELETE /admin/courses/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for courses. First call deactivates (soft delete), second call permanently removes from database (cascades to papers/topics).

**Request Body**:
```json
{
  "token": "session_token",
  "course_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Course 'GCSE Mathematics Higher Tier' deactivated successfully",
  "data": {
    "course_id": "uuid",
    "title": "GCSE Mathematics Higher Tier",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. Warning: This will CASCADE to papers and topics. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Course 'GCSE Mathematics Higher Tier' permanently removed from database",
  "data": {
    "course_id": "uuid",
    "title": "GCSE Mathematics Higher Tier",
    "note": "Course has been permanently deleted from the database. This action cannot be reversed. Papers and topics were also removed (CASCADE)."
  }
}
```

**Error Cases**:
- Missing token or course_id (400)
- Course already inactive (400) - first call only
- Invalid course_id format (400)
- Invalid/expired token (401)
- Not admin or owner (403)
- Course not found (404)
- Server error (500)

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- **⚠️ CASCADE WARNING**: Permanent delete cascades to papers and topics
- Can be reactivated after soft delete using update endpoint

**Usage Examples**:

```javascript
// First call - Soft delete
const response1 = await fetch(`${backend_url}/admin/courses/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid'
  })
});

// Second call - Permanent delete (CASCADE WARNING)
const response2 = await fetch(`${backend_url}/admin/courses/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ 
    token: adminToken,
    course_id: 'course-uuid'
  })
});
```

```bash
# cURL - First delete
curl -X DELETE ${backend_url}/admin/courses/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "course_id": "uuid"}'

# cURL - Second delete (CASCADE)
curl -X DELETE ${backend_url}/admin/courses/delete \
  -H "Content-Type: application/json" \
  -d '{"token": "your_admin_token", "course_id": "uuid"}'
```

---

## Testing

### User Management Tests
A comprehensive test suite is available at `/tests/test_admin_users.py`.

**Test Coverage**:
- ✅ Role-based access control (user, admin, owner)
- ✅ All 7 user management endpoints
- ✅ Permission restrictions and validations
- ✅ Error handling and edge cases
- ✅ Session invalidation on password reset/delete
- ✅ Pagination and filtering
- ✅ Search functionality
- ✅ Self-protection (cannot delete/demote yourself)

**Run Tests**:
```bash
# Ensure Flask server is running on localhost:5000
python3 tests/test_admin_users.py
```

### Years Management Tests
A comprehensive test suite is available at `/tests/test_admin_years.py`.

**Test Coverage**:
- ✅ Role-based access control (user, admin, owner)
- ✅ All 4 years management endpoints
- ✅ CRUD operations and validations
- ✅ Error handling and edge cases
- ✅ Soft delete and reactivation
- ✅ Active/inactive filtering
- ✅ Duplicate name prevention

**Run Tests**:
```bash
python3 tests/test_admin_years.py
```

### Subjects Management Tests
A comprehensive test suite is available at `/tests/test_admin_subjects.py`.

**Test Coverage**:
- ✅ Role-based access control (user, admin, owner)
- ✅ All 4 subjects management endpoints
- ✅ CRUD operations with optional code field
- ✅ Error handling and edge cases
- ✅ Soft delete and reactivation
- ✅ Active/inactive filtering
- ✅ Duplicate name prevention
- ✅ Code field nullable (can set to null)

**Run Tests**:
```bash
python3 tests/test_admin_subjects.py
```

### Courses Management Tests
A comprehensive test suite is available at `/tests/test_admin_courses.py`.

**Test Coverage**:
- ✅ Role-based access control (user, admin, owner)
- ✅ All 5 courses management endpoints
- ✅ CRUD operations with year and subject dependencies
- ✅ Filtering (by year, subject, include_inactive)
- ✅ Error handling and edge cases
- ✅ Soft delete and reactivation
- ✅ Active/inactive filtering
- ✅ Duplicate title prevention within year/subject
- ✅ Detailed course statistics (papers, topics, enrollments)

**Run Tests**:
```bash
python3 tests/test_admin_courses.py
```

---

## Admin Papers Management Endpoints

Papers are components of courses that organize topics. Each paper belongs to one course and can contain multiple topics. Papers have optional code and percentage_of_grade fields. Papers use **soft delete** (can be reactivated) with CASCADE to topics.

### 1. List Papers by Course

**Endpoint**: `POST /admin/papers`

List all papers for a specific course with topic counts.

**Request**:
```json
{
  "token": "admin_session_token",
  "course_id": "uuid-of-course",
  "include_inactive": false
}
```

**Response** (200 OK):
```json
{
  "success": true,
  "message": "Retrieved 3 papers for course 'Introduction to Computer Science'",
  "data": {
    "course": {
      "id": "uuid",
      "title": "Introduction to Computer Science",
      "code": "CS101",
      "year_name": "Year 1",
      "subject_name": "Computer Science"
    },
    "papers": [
      {
        "id": "uuid",
        "course_id": "uuid",
        "name": "Paper 1",
        "code": "P1",
        "percentage_of_grade": 50.0,
        "is_active": true,
        "topics_count": 12,
        "created_at": "2024-01-15T10:30:00",
        "added_by_user_id": "uuid"
      },
      {
        "id": "uuid",
        "course_id": "uuid",
        "name": "Paper 2",
        "code": "P2",
        "percentage_of_grade": 50.0,
        "is_active": true,
        "topics_count": 10,
        "created_at": "2024-01-15T10:31:00",
        "added_by_user_id": "uuid"
      }
    ]
  }
}
```

**Parameters**:
- `token` (required): Admin session token
- `course_id` (required): UUID of the course
- `include_inactive` (optional, default: false): Include soft-deleted papers in results

**JavaScript Example**:
```javascript
// Get only active papers (default)
const response = await fetch(`${baseUrl}/admin/papers`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    course_id: courseId
  })
});

// Get all papers including soft-deleted
const responseAll = await fetch(`${baseUrl}/admin/papers`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    course_id: courseId,
    include_inactive: true
  })
});

const data = await responseAll.json();
if (data.success) {
  console.log(`Course: ${data.data.course.title}`);
  console.log(`Papers: ${data.data.papers.length}`);
  data.data.papers.forEach(paper => {
    const status = paper.is_active ? '✓' : '✗ (inactive)';
    console.log(`- ${paper.name} (${paper.topics_count} topics) ${status}`);
  });
}
```

**Database Optimization**: 2 trips
- Trip 1: Verify course exists and get course/year/subject info
- Trip 2: Get all papers with LEFT JOIN to topics for COUNT aggregation

---

### 2. Get Single Paper

**Endpoint**: `POST /admin/papers/get`

Get detailed information about a specific paper including all topics.

**Request**:
```json
{
  "token": "admin_session_token",
  "paper_id": "uuid-of-paper"
}
```

**Response** (200 OK):
```json
{
  "success": true,
  "message": "Paper retrieved successfully",
  "data": {
    "paper": {
      "id": "uuid",
      "course_id": "uuid",
      "name": "Paper 1",
      "code": "P1",
      "percentage_of_grade": 50.0,
      "created_at": "2024-01-15T10:30:00",
      "added_by_user_id": "uuid",
      "course_title": "Introduction to Computer Science",
      "course_code": "CS101",
      "year_name": "Year 1",
      "subject_name": "Computer Science",
      "topics": [
        {
          "id": "uuid",
          "paper_id": "uuid",
          "name": "Introduction to Programming",
          "sort_order": 1,
          "is_active": true,
          "created_at": "2024-01-15T11:00:00"
        },
        {
          "id": "uuid",
          "paper_id": "uuid",
          "name": "Variables and Data Types",
          "sort_order": 2,
          "is_active": true,
          "created_at": "2024-01-15T11:05:00"
        }
      ]
    }
  }
}
```

**JavaScript Example**:
```javascript
const response = await fetch(`${baseUrl}/admin/papers/get`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    paper_id: paperId
  })
});

const data = await response.json();
if (data.success) {
  const paper = data.data.paper;
  console.log(`Paper: ${paper.name} (${paper.code})`);
  console.log(`Course: ${paper.course_title}`);
  console.log(`Topics: ${paper.topics.length}`);
}
```

**Database Optimization**: 2 trips
- Trip 1: Get paper details with LEFT JOINs to courses/years/subjects
- Trip 2: Get all topics for the paper (ordered by sort_order, name)

---

### 3. Create Paper

**Endpoint**: `POST /admin/papers/create`

Create a new paper for a course.

**Request**:
```json
{
  "token": "admin_session_token",
  "course_id": "uuid-of-course",
  "name": "Paper 1",
  "code": "P1",
  "percentage_of_grade": 50.0
}
```

**Required Fields**:
- `course_id`: UUID of the parent course
- `name`: Paper name (unique within course)

**Optional Fields**:
- `code`: Short code for the paper
- `percentage_of_grade`: Numeric value between 0 and 100

**Response** (201 Created):
```json
{
  "success": true,
  "message": "Paper 'Paper 1' created successfully",
  "data": {
    "paper": {
      "id": "uuid",
      "course_id": "uuid",
      "name": "Paper 1",
      "code": "P1",
      "percentage_of_grade": 50.0,
      "created_at": "2024-01-15T10:30:00",
      "added_by_user_id": "uuid"
    }
  }
}
```

**Validation Rules**:
- Course must exist and be active
- Paper name must be unique within course
- percentage_of_grade must be between 0 and 100 (if provided)
- Sets added_by_user_id to admin's user ID

**JavaScript Example**:
```javascript
const response = await fetch(`${baseUrl}/admin/papers/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    course_id: courseId,
    name: "Paper 1",
    code: "P1",
    percentage_of_grade: 50.0
  })
});

const data = await response.json();
if (data.success) {
  console.log(`Created paper: ${data.data.paper.name}`);
}
```

**cURL Example**:
```bash
curl -X POST http://localhost:5000/admin/papers/create \
  -H "Content-Type: application/json" \
  -d '{
    "token": "your-admin-token",
    "course_id": "course-uuid",
    "name": "Paper 1",
    "code": "P1",
    "percentage_of_grade": 50.0
  }'
```

**Database Optimization**: 3 trips
- Trip 1: Verify course exists and is active
- Trip 2: Check for duplicate paper name within course
- Trip 3: INSERT new paper with RETURNING

**Potential Optimization**: Could combine trips 1 and 2 into single validation query using EXISTS.

---

### 4. Update Paper

**Endpoint**: `PUT /admin/papers/update`

Update an existing paper's details.

**Request**:
```json
{
  "token": "admin_session_token",
  "paper_id": "uuid-of-paper",
  "name": "Updated Paper Name",
  "code": "UP1",
  "percentage_of_grade": 60.0
}
```

**Required Fields**:
- `paper_id`: UUID of paper to update
- At least one field to update (`name`, `code`, or `percentage_of_grade`)

**Response** (200 OK):
```json
{
  "success": true,
  "message": "Paper updated successfully",
  "data": {
    "paper": {
      "id": "uuid",
      "course_id": "uuid",
      "name": "Updated Paper Name",
      "code": "UP1",
      "percentage_of_grade": 60.0,
      "created_at": "2024-01-15T10:30:00",
      "added_by_user_id": "uuid"
    }
  }
}
```

**Validation Rules**:
- Paper must exist
- If updating name, new name must not duplicate existing paper in same course
- percentage_of_grade must be between 0 and 100 (if provided)

**JavaScript Example**:
```javascript
const response = await fetch(`${baseUrl}/admin/papers/update`, {
  method: 'PUT',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    paper_id: paperId,
    name: "Updated Name"
  })
});

const data = await response.json();
if (data.success) {
  console.log(`Updated paper: ${data.data.paper.name}`);
}
```

**Database Optimization**: 3 trips
- Trip 1: Verify paper exists and get current course_id
- Trip 2: Check for duplicate name (only if name is being changed)
- Trip 3: UPDATE paper with RETURNING

**Potential Optimization**: Could skip trip 2 if name hasn't changed, or combine trips 1-2.

---

### 5. Delete Paper (Two-Stage Delete)

**Endpoint**: `DELETE /admin/papers/delete`

**Description**: Papers use a **two-stage delete pattern** like topics:
1. **First DELETE call**: Soft delete (sets `is_active = false`)
2. **Second DELETE call**: Permanent delete (CASCADE removes all topics)

**Request**:
```json
{
  "token": "admin_session_token",
  "paper_id": "uuid-of-paper"
}
```

**Response - First Call** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Paper 'Paper 1' deactivated successfully",
  "data": {
    "paper_id": "uuid",
    "name": "Paper 1",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. Warning: This will CASCADE to all topics. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Response - Second Call** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Paper 'Paper 1' permanently removed from database",
  "data": {
    "paper_id": "uuid",
    "name": "Paper 1",
    "note": "Paper has been permanently deleted from the database. This action cannot be reversed. Associated topics were also removed (CASCADE)."
  }
}
```

**Response - Third Call** (404 Not Found):
```json
{
  "success": false,
  "message": "Paper not found"
}
```

**Two-Stage Delete Behavior**:
- **Stage 1 (Soft Delete)**: Sets `is_active = false`, paper and topics no longer appear in list endpoints
- **Stage 2 (Permanent Delete)**: Physically removes paper from database, CASCADE deletes all topics
- **Reactivation**: Before permanent delete, use update endpoint with `is_active: true`

**JavaScript Example**:
```javascript
// First call - soft delete
const response1 = await fetch(`${baseUrl}/admin/papers/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    paper_id: paperId
  })
});

const data1 = await response1.json();
console.log(data1.message); // "Paper deactivated successfully"

// Second call - permanent delete
const response2 = await fetch(`${baseUrl}/admin/papers/delete`, {
  method: 'DELETE',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: adminToken,
    paper_id: paperId
  })
});

const data2 = await response2.json();
console.log(data2.message); // "Paper permanently removed from database"
```

**Database Optimization**: 1 trip per call
- First call: Single UPDATE query
- Second call: Single DELETE...RETURNING query (CASCADE handled by database)

---

### Papers Management Tests

**Test Coverage** (23/23 passing):
- ✅ Authentication & authorization
- ✅ Create paper with required fields only
- ✅ Create paper with all optional fields
- ✅ Duplicate name prevention within course
- ✅ Percentage validation (0-100 range)
- ✅ is_active field included in responses
- ✅ List papers filters by is_active=true
- ✅ Get paper includes is_active field
- ✅ Update paper name
- ✅ Update all paper fields including is_active
- ✅ Duplicate name prevention on update
- ✅ Soft delete paper (Stage 1)
- ✅ Soft delete sets is_active = false
- ✅ Soft delete filters from list endpoint
- ✅ Permanent delete paper (Stage 2)
- ✅ Permanent delete removes from database
- ✅ Permanent delete cascades to topics
- ✅ Delete already-deleted paper returns 404
- ✅ Reactivate soft-deleted paper via update
- ✅ Two-stage delete workflow complete cycle
- ✅ Reactivation prevents cascade deletion
- ✅ Papers maintain creation order across CRUD
- ✅ Permission levels (Admin vs Owner)

**Run Tests**:
```bash
python3 tests/test_admin_papers_is_active.py
```

---

## Topics Management

Topics are subject areas within papers. Topics use **soft delete** (can be reactivated).

### 1. List Topics

**Endpoint**: `POST /admin/topics`

**Auth**: Admin or Owner

**Description**: List all topics for a specific paper with resource counts.

**Request Body**:
```json
{
  "token": "session_token",
  "paper_id": "uuid",
  "include_inactive": false  // Optional: include soft-deleted topics
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Retrieved 5 topics for paper 'Paper 1'",
  "data": {
    "paper": {
      "id": "uuid",
      "name": "Paper 1",
      "code": "P1",
      "course_title": "Mathematics",
      "year_name": "A-Level (12/13)",
      "subject_name": "Mathematics"
    },
    "topics": [
      {
        "id": "uuid",
        "paper_id": "uuid",
        "name": "Algebra",
        "sort_order": 1,
        "is_active": true,
        "created_at": "2025-10-01T12:00:00.000000",
        "added_by_user_id": "uuid",
        "notes_count": 5,
        "questions_count": 12,
        "podcasts_count": 2,
        "has_notes": true,
        "has_questions": true,
        "has_podcast": true
      }
    ],
    "count": 5
  }
}
```

**Database Optimization**: 2 trips
- Verify paper exists (1 query with LEFT JOINs)
- Get topics with resource counts (1 query with LEFT JOINs + GROUP BY)

**JavaScript Example**:
```javascript
const response = await fetch(`${backend_url}/admin/topics`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    paper_id: paperId,
    include_inactive: false
  })
});
const data = await response.json();
```

---

### 2. Get Single Topic

**Endpoint**: `POST /admin/topics/get`

**Auth**: Admin or Owner

**Description**: Get a single topic with all related content (notes, questions, podcasts).

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Topic retrieved successfully",
  "data": {
    "topic": {
      "id": "uuid",
      "paper_id": "uuid",
      "name": "Algebra",
      "sort_order": 1,
      "is_active": true,
      "created_at": "2025-10-01T12:00:00.000000",
      "added_by_user_id": "uuid",
      "paper_name": "Paper 1",
      "paper_code": "P1",
      "course_id": "uuid",
      "course_title": "Mathematics",
      "year_name": "A-Level (12/13)",
      "subject_name": "Mathematics",
      "notes": [
        {
          "id": "uuid",
          "content": "Algebraic expressions...",
          "is_active": true,
          "created_at": "2025-10-01T12:00:00.000000",
          "added_by_user_id": "uuid"
        }
      ],
      "questions": [
        {
          "id": "uuid",
          "question": "Solve: 2x + 5 = 15",
          "is_active": true,
          "created_at": "2025-10-01T12:00:00.000000",
          "added_by_user_id": "uuid",
          "options_count": 4
        }
      ],
      "podcasts": [
        {
          "id": "uuid",
          "name": "Introduction to Algebra",
          "url": "https://...",
          "length_seconds": 600,
          "file_size": 1048576,
          "is_active": true,
          "created_at": "2025-10-01T12:00:00.000000",
          "added_by_user_id": "uuid"
        }
      ],
      "content_summary": {
        "notes_count": 5,
        "questions_count": 12,
        "podcasts_count": 2,
        "has_notes": true,
        "has_questions": true,
        "has_podcast": true
      }
    }
  }
}
```

**Database Optimization**: 4 trips
- Get topic with paper/course/year/subject context (1 query)
- Get all notes for topic (1 query)
- Get all questions with options_count (1 query)
- Get all podcasts for topic (1 query)

---

### 3. Create Topic

**Endpoint**: `POST /admin/topics/create`

**Auth**: Admin or Owner

**Description**: Create a new topic within a paper.

**Request Body**:
```json
{
  "token": "session_token",
  "paper_id": "uuid",
  "name": "Algebra",
  "sort_order": 1  // Optional: defaults to 0
}
```

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Topic 'Algebra' created successfully",
  "data": {
    "topic": {
      "id": "uuid",
      "paper_id": "uuid",
      "name": "Algebra",
      "sort_order": 1,
      "is_active": true,
      "created_at": "2025-10-01T12:00:00.000000",
      "added_by_user_id": "uuid"
    }
  }
}
```

**Validation**:
- Paper must exist
- Topic name must be unique within the paper
- sort_order must be an integer if provided

**Database Optimization**: 3 trips
- Verify paper exists (1 query)
- Check for duplicate name (1 query)
- Insert topic with RETURNING (1 query)

---

### 4. Update Topic

**Endpoint**: `PUT /admin/topics/update`

**Auth**: Admin or Owner

**Description**: Update topic name, sort_order, and/or active status. Can reactivate soft-deleted topics.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid",
  "name": "Advanced Algebra",        // Optional
  "sort_order": 2,                   // Optional
  "is_active": true                  // Optional: reactivate topic
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Topic updated successfully",
  "data": {
    "topic": {
      "id": "uuid",
      "paper_id": "uuid",
      "name": "Advanced Algebra",
      "sort_order": 2,
      "is_active": true,
      "created_at": "2025-10-01T12:00:00.000000",
      "added_by_user_id": "uuid"
    }
  }
}
```

**Validation**:
- Topic must exist
- If changing name, new name must be unique within the paper
- At least one field must be provided to update

**Database Optimization**: 3 trips
- Verify topic exists and get paper_id (1 query)
- Check for duplicate name if name is changing (1 query)
- Update topic with RETURNING (1 query)

---

### 5. Delete Topic

**Endpoint**: `DELETE /admin/topics/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for topics. First call deactivates (soft delete), second call permanently removes from database (cascades to notes/questions/podcasts).

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Topic 'Algebra' deactivated successfully",
  "data": {
    "topic_id": "uuid",
    "name": "Algebra",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. Warning: This will CASCADE to notes, questions, and podcasts. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Topic 'Algebra' permanently removed from database",
  "data": {
    "topic_id": "uuid",
    "name": "Algebra",
    "note": "Topic has been permanently deleted from the database. This action cannot be reversed. Associated notes, questions, and podcasts were also removed (CASCADE)."
  }
}
```

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- **⚠️ CASCADE WARNING**: Permanent delete cascades to notes, questions, and podcasts
- Can be reactivated after soft delete using update endpoint

**Database Optimization**: 1 trip per call
- Single UPDATE...RETURNING query with WHERE clause

---

### Topics Management Tests

**Test Coverage** (14/14 passing):
- ✅ Authentication & authorization
- ✅ Create topic with required fields
- ✅ Create topic with sort_order
- ✅ Duplicate name prevention within paper
- ✅ Invalid sort_order validation
- ✅ List multiple topics with resource counts
- ✅ List with include_inactive parameter
- ✅ Get single topic with all content
- ✅ Update topic name
- ✅ Update topic sort_order
- ✅ Duplicate name prevention on update
- ✅ Soft delete topic
- ✅ Reactivate deactivated topic
- ✅ Prevent double deletion

**Run Tests**:
```bash
python3 tests/test_admin_topics.py
```

---

## Questions Management

Questions are quiz items within topics with multiple choice options. Questions use **soft delete** (can be reactivated). Each question has an associated set of options.

### 1. List Questions

**Endpoint**: `POST /admin/questions`

**Auth**: Admin or Owner

**Description**: List all questions for a specific topic, including soft-deleted questions if requested.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid",
  "include_inactive": false  // Optional: include soft-deleted questions
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Retrieved 8 questions for topic 'Algebra'",
  "data": {
    "topic": {
      "id": "uuid",
      "paper_id": "uuid",
      "name": "Algebra",
      "sort_order": 1,
      "is_active": true
    },
    "questions": [
      {
        "id": "uuid",
        "topic_id": "uuid",
        "question_text": "What is 2 + 2?",
        "sort_order": 1,
        "is_active": true,
        "created_at": "2025-01-01T12:00:00.000000",
        "added_by_user_id": "uuid",
        "options": [
          {
            "id": "uuid",
            "question_id": "uuid",
            "option_text": "3",
            "sort_order": 1,
            "is_correct": false
          },
          {
            "id": "uuid",
            "question_id": "uuid",
            "option_text": "4",
            "sort_order": 2,
            "is_correct": true
          }
        ],
        "option_count": 2
      }
    ],
    "count": 8
  }
}
```

**Database Optimization**: 2 trips
- Verify topic exists with paper context (1 query with JOINs)
- Get questions with options aggregated as JSON (1 query with JSON_AGG)

**JavaScript Example**:
```javascript
const response = await fetch(`${backend_url}/admin/questions`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    topic_id: topicId,
    include_inactive: false
  })
});
const data = await response.json();
```

---

### 2. Get Single Question

**Endpoint**: `POST /admin/questions/get`

**Auth**: Admin or Owner

**Description**: Get a single question with all associated options and topic context.

**Request Body**:
```json
{
  "token": "session_token",
  "question_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Question retrieved successfully",
  "data": {
    "question": {
      "id": "uuid",
      "topic_id": "uuid",
      "question_text": "What is the square root of 16?",
      "sort_order": 1,
      "is_active": true,
      "created_at": "2025-01-01T12:00:00.000000",
      "added_by_user_id": "uuid",
      "topic_name": "Algebra",
      "paper_name": "Paper 1",
      "options": [
        {
          "id": "uuid",
          "question_id": "uuid",
          "option_text": "2",
          "sort_order": 1,
          "is_correct": false
        },
        {
          "id": "uuid",
          "question_id": "uuid",
          "option_text": "4",
          "sort_order": 2,
          "is_correct": true
        }
      ]
    }
  }
}
```

**Error Responses**:
- 404 Not Found - Question doesn't exist or is permanently deleted

**Database Optimization**: 1 trip
- Single query with JOINs to topic, paper and aggregated options

**JavaScript Example**:
```javascript
const response = await fetch(`${backend_url}/admin/questions/get`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    question_id: questionId
  })
});
const data = await response.json();
```

---

### 3. Create Question

**Endpoint**: `POST /admin/questions/create`

**Auth**: Admin or Owner

**Description**: Create a new question within a topic with options. Requires at least 2 options, exactly 1 marked as correct.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid",
  "question_text": "What is the derivative of x²?",
  "sort_order": 5,
  "options": [
    {
      "option_text": "x",
      "sort_order": 1,
      "is_correct": false
    },
    {
      "option_text": "2x",
      "sort_order": 2,
      "is_correct": true
    },
    {
      "option_text": "x³/3",
      "sort_order": 3,
      "is_correct": false
    }
  ]
}
```

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Question created successfully",
  "data": {
    "question_id": "uuid",
    "question_text": "What is the derivative of x²?",
    "sort_order": 5,
    "is_active": true,
    "topic_id": "uuid",
    "added_by_user_id": "uuid",
    "option_count": 3,
    "options": [
      {
        "id": "uuid",
        "option_text": "x",
        "sort_order": 1,
        "is_correct": false
      },
      {
        "id": "uuid",
        "option_text": "2x",
        "sort_order": 2,
        "is_correct": true
      },
      {
        "id": "uuid",
        "option_text": "x³/3",
        "sort_order": 3,
        "is_correct": false
      }
    ]
  }
}
```

**Validation Rules**:
- `question_text` is required and non-empty
- `topic_id` must be valid and active
- `options` array must have 2-10 items
- Exactly 1 option must have `is_correct: true`
- Option text must be non-empty and unique within question
- `sort_order` must be positive integer (optional, auto-assigned if omitted)

**Error Responses**:
- 400 Bad Request - Missing required fields or validation failed
- 404 Not Found - Topic doesn't exist

**Database Optimization**: 3 trips
- Verify topic exists (1 query)
- Create question (1 INSERT with RETURNING)
- Create all options (1 INSERT with multiple rows)

**JavaScript Example**:
```javascript
const response = await fetch(`${backend_url}/admin/questions/create`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    topic_id: topicId,
    question_text: "What is 5 × 6?",
    sort_order: 3,
    options: [
      { option_text: "25", sort_order: 1, is_correct: false },
      { option_text: "30", sort_order: 2, is_correct: true },
      { option_text: "35", sort_order: 3, is_correct: false }
    ]
  })
});
const data = await response.json();
```

---

### 4. Update Question

**Endpoint**: `POST /admin/questions/update`

**Auth**: Admin or Owner

**Description**: Update question text, sort order, or is_active status. Cannot modify options directly (must be deleted and recreated).

**Request Body**:
```json
{
  "token": "session_token",
  "question_id": "uuid",
  "question_text": "Updated question text?",  // Optional
  "sort_order": 2,                         // Optional
  "is_active": true                        // Optional
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Question updated successfully",
  "data": {
    "question_id": "uuid",
    "question_text": "Updated question text?",
    "sort_order": 2,
    "is_active": true,
    "updated_at": "2025-01-15T10:30:00.000000",
    "options": [
      {
        "id": "uuid",
        "option_text": "Option A",
        "sort_order": 1,
        "is_correct": true
      }
    ]
  }
}
```

**Validation Rules**:
- At least one field must be provided for update
- `question_text` must be non-empty if provided
- `sort_order` must be positive integer if provided
- Cannot reactivate if topic is inactive
- At least one option must still have `is_correct: true`

**Error Responses**:
- 400 Bad Request - No update fields provided or validation failed
- 404 Not Found - Question doesn't exist

**Database Optimization**: 3-5 trips (variable)
- Verify question exists (1 query)
- Update question (1 UPDATE with RETURNING)
- Get updated question with options (1 query)
- Optional: Verify inactive topic state (1 query if checking topic)
- Optional: Additional validation queries (1 query)

**JavaScript Example**:
```javascript
const response = await fetch(`${backend_url}/admin/questions/update`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    question_id: questionId,
    question_text: "What is the capital of France?",
    sort_order: 1
  })
});
const data = await response.json();
```

---

### 5. Delete Question

**Endpoint**: `POST /admin/questions/delete`

**Auth**: Admin or Owner

**Description**: Delete a question (soft or permanent delete). Uses **two-stage delete** pattern:
- **Stage 1** (First call): Soft delete - sets `is_active = false`
- **Stage 2** (Second call): Permanent delete - removes from database

**Request Body**:
```json
{
  "token": "session_token",
  "question_id": "uuid"
}
```

**Success Response - Stage 1 (Soft Delete)** (200 OK):
```json
{
  "success": true,
  "message": "Question marked for deletion. Call again to permanently delete.",
  "data": {
    "question_id": "uuid",
    "is_active": false,
    "warning": "This question is now hidden from users. Call this endpoint again to permanently remove from database. Warning: This will CASCADE to delete all options. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Success Response - Stage 2 (Permanent Delete)** (200 OK):
```json
{
  "success": true,
  "message": "Question permanently deleted from database",
  "data": {
    "question_id": "uuid",
    "deleted": true
  }
}
```

**Error Responses**:
- 404 Not Found - After permanent delete, attempting another delete
- 401 Unauthorized - Insufficient permissions

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- **⚠️ CASCADE WARNING**: Permanent delete cascades to all options
- Can be reactivated after soft delete using update endpoint

**Database Optimization**: 1 trip per call
- Single UPDATE...RETURNING query with WHERE clause

**JavaScript Example**:
```javascript
// Stage 1: Soft Delete
const response1 = await fetch(`${backend_url}/admin/questions/delete`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    question_id: questionId
  })
});
const data1 = await response1.json();
console.log(data1.message); // "Question marked for deletion. Call again to permanently delete."

// Stage 2: Permanent Delete (call same endpoint again)
const response2 = await fetch(`${backend_url}/admin/questions/delete`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    question_id: questionId
  })
});
const data2 = await response2.json();
console.log(data2.message); // "Question permanently deleted from database"
```

---

### Questions Management Tests

**Test Coverage** (48/48 passing):
- ✅ Authentication & authorization
- ✅ Create question with valid options
- ✅ Validation: Question text required
- ✅ Validation: At least 2 options required
- ✅ Validation: Exactly 1 correct answer required
- ✅ Validation: Option text must be unique
- ✅ Validation: Invalid topic ID
- ✅ Create question with various sort_order values
- ✅ List all questions for topic
- ✅ List with include_inactive parameter
- ✅ List questions count accuracy
- ✅ Get single question with all options
- ✅ Get question with options in sort order
- ✅ Update question text
- ✅ Update sort order
- ✅ Update is_active status (soft delete reactivation)
- ✅ Update validation: non-empty question text
- ✅ Update validation: positive sort order
- ✅ Get non-existent question (404)
- ✅ Soft delete question (Stage 1)
- ✅ Soft delete marks is_active = false
- ✅ Soft delete filters from list endpoint
- ✅ Permanent delete question (Stage 2)
- ✅ Permanent delete removes from database
- ✅ Permanent delete cascades to options
- ✅ Delete already-deleted question returns 404
- ✅ Reactivate soft-deleted question via update
- ✅ Two-stage delete workflow complete cycle
- ✅ Questions maintain sort order across CRUD
- ✅ Options maintain correct sort order
- ✅ Multiple questions per topic
- ✅ Multiple options per question
- ✅ Concurrent create/update operations
- ✅ Large option sets (10 options)
- ✅ Unicode text in questions and options
- ✅ Empty string validation
- ✅ Duplicate question text allowed
- ✅ Case sensitivity in validation
- ✅ Whitespace handling in text fields
- ✅ Sort order conflicts and resolution
- ✅ Transaction isolation for create
- ✅ Transaction rollback on validation failure
- ✅ Permission levels (Admin vs Owner)
- ✅ Delete cascade with topic deactivation
- ✅ Reactivate options with reactivated question
- ✅ Two-stage delete prevents accidental loss

**Run Tests**:
```bash
python3 tests/test_admin_questions.py
```

---

## Notes Management

Admin endpoints for managing notes content within topics. Notes contain the primary text content for learning materials.

### 1. Get Notes for Topic

**Endpoint**: `POST /admin/notes`

**Auth**: Admin or Owner

**Description**: Retrieve notes for a specific topic. By default, only active notes are returned. Set `include_inactive: true` to include soft-deleted notes.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid",
  "include_inactive": false
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Notes fetched successfully for topic 'Topic Name'",
  "data": {
    "topic": {
      "id": "uuid",
      "name": "Cell Structure",
      "is_active": true,
      "paper_id": "uuid",
      "paper_name": "Paper 1",
      "course_id": "uuid",
      "course_title": "GCSE Biology"
    },
    "notes": [
      {
        "id": "uuid",
        "topic_id": "uuid",
        "content": "Comprehensive notes content...",
        "is_active": true,
        "created_at": "2025-10-01T12:00:00.000000",
        "added_by_user_id": "uuid"
      }
    ],
    "notes_count": 2,
    "active_notes_count": 2
  }
}
```

**Parameters**:
- `token` (required): Admin session token
- `topic_id` (required): UUID of the topic
- `include_inactive` (optional, default: false): Include soft-deleted notes in results

**Error Responses**:
- `400 Bad Request`: Missing required fields
- `403 Forbidden`: Admin access required
- `404 Not Found`: Topic not found
- `500 Internal Server Error`: Database error

**JavaScript Example**:
```javascript
// Get only active notes (default)
const response = await fetch(`${baseUrl}/admin/notes`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    topic_id: topicId
  })
});

// Get all notes including soft-deleted
const responseAll = await fetch(`${baseUrl}/admin/notes`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: sessionToken,
    topic_id: topicId,
    include_inactive: true
  })
});

const data = await responseAll.json();
console.log(`Total notes: ${data.data.notes_count}`);
console.log(`Active notes: ${data.data.active_notes_count}`);
```

**Database Optimization**: 2 trips
- Query 1: Get topic with course/paper context
- Query 2: Get notes for topic (filtered by include_inactive, ordered by created_at DESC)

---

### 2. Create Notes for Topic

**Endpoint**: `POST /admin/notes/create`

**Auth**: Admin or Owner

**Description**: Create notes for a topic. Multiple notes can exist for a topic (e.g., different versions), but typically only one should be active at a time.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid",
  "content": "Detailed notes content with multiple paragraphs...\n\nSupports markdown and formatting."
}
```

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Notes created successfully for topic 'Topic Name'",
  "data": {
    "notes": {
      "id": "uuid",
      "topic_id": "uuid",
      "content": "Detailed notes content...",
      "is_active": true,
      "created_at": "2025-10-01T12:00:00.000000",
      "added_by_user_id": "uuid"
    }
  }
}
```

**Error Responses**:
- `400 Bad Request`: Missing fields or empty content
- `403 Forbidden`: Admin access required
- `404 Not Found`: Topic not found
- `409 Conflict`: (Not applicable - multiple notes allowed)
- `500 Internal Server Error`: Database error

**Validation**:
- `topic_id` is required and must be valid UUID
- `content` is required and cannot be empty (after trim)
- Content length: No strict limit (supports very long notes ~50KB+)
- Special characters, emojis, HTML/Markdown all supported

**Auto-set Fields**:
- `added_by_user_id`: Set to the admin's user ID from token
- `is_active`: Set to true by default
- `created_at`: Automatically timestamped

**Database Optimization**: 2 trips
- Query 1: Verify topic exists
- Query 2: INSERT...RETURNING new notes

---

### 3. Update Notes

**Endpoint**: `PUT /admin/notes/update`

**Auth**: Admin or Owner

**Description**: Update notes content and/or activation status. Can be used to reactivate soft-deleted notes.

**Request Body**:
```json
{
  "token": "session_token",
  "notes_id": "uuid",
  "content": "Updated notes content...",  // Optional
  "is_active": true                      // Optional
}
```

**Note**: At least one field (`content` or `is_active`) must be provided.

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Notes updated successfully for topic 'Topic Name'",
  "data": {
    "notes": {
      "id": "uuid",
      "topic_id": "uuid",
      "content": "Updated notes content...",
      "is_active": true,
      "created_at": "2025-10-01T12:00:00.000000",
      "added_by_user_id": "uuid"
    }
  }
}
```

**Error Responses**:
- `400 Bad Request`: Missing fields, no update fields provided, or empty content
- `403 Forbidden`: Admin access required
- `404 Not Found`: Notes not found
- `500 Internal Server Error`: Database error

**Validation**:
- At least one field to update must be provided
- `content` cannot be empty if provided (after trim)
- `is_active` must be boolean if provided

**Use Cases**:
- Update content only: `{"notes_id": "uuid", "content": "new content"}`
- Deactivate: `{"notes_id": "uuid", "is_active": false}`
- Reactivate: `{"notes_id": "uuid", "is_active": true}`
- Both: `{"notes_id": "uuid", "content": "new", "is_active": true}`

**Database Optimization**: 2 trips
- Query 1: Verify notes exist (with topic name for response)
- Query 2: Dynamic UPDATE...RETURNING based on provided fields

---

### 4. Delete Notes

**Endpoint**: `DELETE /admin/notes/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for notes. First call deactivates (soft delete), second call permanently removes from database.

**Request Body**:
```json
{
  "token": "session_token",
  "notes_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Notes deactivated successfully",
  "data": {
    "notes_id": "uuid",
    "topic_id": "uuid",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Notes permanently removed from database",
  "data": {
    "notes_id": "uuid",
    "note": "Notes have been permanently deleted from the database. This action cannot be reversed."
  }
}
```

**Error Responses**:
- `400 Bad Request`: Missing required fields or already inactive (first call)
- `403 Forbidden`: Admin access required
- `404 Not Found`: Notes not found
- `500 Internal Server Error`: Database error

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- Can be reactivated after soft delete using update endpoint

**Database Optimization**: 1 trip per call
- Single UPDATE...RETURNING or DELETE...RETURNING query

---

### Notes Management Tests

**Test Coverage** (31/31 passing):
- ✅ Authentication & authorization (regular blocked, admin/owner allowed)
- ✅ Create notes with valid data
- ✅ Create second notes for same topic (multiple allowed)
- ✅ Missing/empty content validation
- ✅ Invalid topic_id handling
- ✅ Get notes for valid topic
- ✅ Get notes for invalid topic
- ✅ Notes array structure verification
- ✅ Update content only
- ✅ Update is_active only (deactivate)
- ✅ Reactivate soft-deleted notes
- ✅ Update both content and status
- ✅ Validation: no fields to update
- ✅ Validation: empty content on update
- ✅ Update non-existent notes
- ✅ Soft delete notes
- ✅ Verify soft-deleted notes reversible
- ✅ Delete non-existent notes
- ✅ Edge case: very long content (50KB+)
- ✅ Edge case: special characters and emojis
- ✅ Edge case: HTML/Markdown content

**Run Tests**:
```bash
python3 tests/test_admin_notes.py
```

**Test Features**:
- Comprehensive role-based access control testing
- Full CRUD operation validation
- Edge cases for content types and sizes
- Soft delete and reactivation verification
- All error cases and validation rules

---

## Podcasts Management

### 1. Get Podcasts for Topic

**Endpoint**: `POST /admin/podcasts`

**Auth**: Admin or Owner

**Description**: Get all podcasts (active and inactive) for a specific topic, including topic context information.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Podcasts fetched successfully",
  "data": {
    "topic": {
      "id": "uuid",
      "paper_id": "uuid",
      "name": "Cell Biology",
      "sort_order": 1,
      "is_active": true
    },
    "podcasts": [
      {
        "id": "uuid",
        "topic_id": "uuid",
        "name": "Cell Structure Overview",
        "url": "https://storage.lockin.tech/podcasts/cell-structure.mp3",
        "length_seconds": 600,
        "file_size": 15728640,
        "is_active": true,
        "added_by_user_id": "uuid",
        "created_at": "2025-01-01T12:00:00.000000"
      }
    ],
    "podcasts_count": 5,
    "active_podcasts_count": 4
  }
}
```

**Error Response** (404 Not Found):
```json
{
  "success": false,
  "message": "Topic not found"
}
```

**Database Queries**: 2
1. Verify topic exists + get context
2. Fetch all podcasts for topic (with LEFT JOIN for added_by user info)

---

### 2. Create Podcast

**Endpoint**: `POST /admin/podcasts/create`

**Auth**: Admin or Owner

**Description**: Create a new podcast for a topic. Automatically records the admin who created it.

**Request Body**:
```json
{
  "token": "session_token",
  "topic_id": "uuid",
  "name": "Cell Structure Overview",
  "url": "https://storage.lockin.tech/podcasts/cell-structure.mp3",
  "length_seconds": 600,          // Optional: duration in seconds
  "file_size": 15728640           // Optional: file size in bytes
}
```

**Validation**:
- `topic_id`: Required, must be valid UUID of existing active topic
- `name`: Required, non-empty string
- `url`: Required, non-empty string (URL to podcast file)
- `length_seconds`: Optional, must be >= 0 if provided
- `file_size`: Optional, must be >= 0 if provided

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Podcast created successfully",
  "data": {
    "podcast": {
      "id": "uuid",
      "topic_id": "uuid",
      "name": "Cell Structure Overview",
      "url": "https://storage.lockin.tech/podcasts/cell-structure.mp3",
      "length_seconds": 600,
      "file_size": 15728640,
      "is_active": true,
      "added_by_user_id": "uuid",
      "created_at": "2025-01-01T12:00:00.000000"
    },
    "topic": {
      "name": "Cell Biology"
    }
  }
}
```

**Error Responses**:

*400 Bad Request* - Missing or invalid fields:
```json
{
  "success": false,
  "message": "Missing required field: url"
}
```

*404 Not Found* - Topic doesn't exist:
```json
{
  "success": false,
  "message": "Topic not found or inactive"
}
```

**Database Queries**: 2
1. Verify topic exists and is active
2. Insert podcast with RETURNING clause

---

### 3. Update Podcast

**Endpoint**: `PUT /admin/podcasts/update`

**Auth**: Admin or Owner

**Description**: Update podcast details. Any combination of fields can be updated. Supports soft delete/reactivation via `is_active` field.

**Request Body**:
```json
{
  "token": "session_token",
  "podcast_id": "uuid",
  "name": "Updated Podcast Name",          // Optional
  "url": "https://new-url.com/podcast.mp3", // Optional
  "length_seconds": 720,                    // Optional
  "file_size": 20971520,                    // Optional
  "is_active": false                        // Optional: soft delete
}
```

**Validation**:
- `podcast_id`: Required, must be valid UUID of existing podcast
- At least one field to update must be provided
- `length_seconds`: Must be >= 0 if provided
- `file_size`: Must be >= 0 if provided

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Podcast updated successfully",
  "data": {
    "podcast": {
      "id": "uuid",
      "topic_id": "uuid",
      "name": "Updated Podcast Name",
      "url": "https://new-url.com/podcast.mp3",
      "length_seconds": 720,
      "file_size": 20971520,
      "is_active": false,
      "added_by_user_id": "uuid",
      "created_at": "2025-01-01T12:00:00.000000"
    }
  }
}
```

**Error Responses**:

*400 Bad Request* - No fields to update:
```json
{
  "success": false,
  "message": "No fields to update"
}
```

*400 Bad Request* - Invalid field value:
```json
{
  "success": false,
  "message": "length_seconds must be a non-negative integer"
}
```

*404 Not Found* - Podcast doesn't exist:
```json
{
  "success": false,
  "message": "Podcast not found"
}
```

**Database Queries**: 2
1. Verify podcast exists
2. Dynamic UPDATE with only provided fields, using RETURNING clause

**Use Cases**:
- Update podcast metadata after re-encoding
- Change URL when moving to new storage
- Soft delete: `{"is_active": false}`
- Reactivate: `{"is_active": true}`

---

### 4. Delete Podcast

**Endpoint**: `DELETE /admin/podcasts/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for podcasts. First call deactivates (soft delete), second call permanently removes from database.

**Request Body**:
```json
{
  "token": "session_token",
  "podcast_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Podcast 'Cell Structure Overview' deactivated successfully",
  "data": {
    "podcast_id": "uuid",
    "name": "Cell Structure Overview",
    "is_active": false,
    "note": "Call delete again to permanently remove from database. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Podcast 'Cell Structure Overview' permanently removed from database",
  "data": {
    "podcast_id": "uuid",
    "name": "Cell Structure Overview",
    "note": "Podcast has been permanently deleted from the database. This action cannot be reversed."
  }
}
```

**Error Response** (404 Not Found):
```json
{
  "success": false,
  "message": "Podcast not found"
}
```

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- Can be reactivated after soft delete using update endpoint
- Does not affect the topic or other content

**Database Queries**: 1 per call (optimized)
- Single UPDATE or DELETE with RETURNING clause

---

### Podcasts Management Tests

**Test Coverage** (26/26 passing):
- ✅ Authentication & authorization (regular blocked, admin/owner allowed)
- ✅ Create podcast with all fields
- ✅ Create podcast without optional fields (length_seconds, file_size)
- ✅ Missing required fields validation (url)
- ✅ Invalid topic_id handling
- ✅ Invalid length_seconds (negative) validation
- ✅ Get podcasts for valid topic
- ✅ Get podcasts for invalid topic
- ✅ Update name only
- ✅ Update multiple fields
- ✅ Deactivate podcast (soft delete via update)
- ✅ Reactivate podcast
- ✅ Update with no fields (validation)
- ✅ Update non-existent podcast
- ✅ Soft delete podcast
- ✅ Verify soft-deleted podcast can be reactivated
- ✅ Delete non-existent podcast
- ✅ Edge case: very long URL (1000+ chars)
- ✅ Edge case: large file size (1GB)
- ✅ Edge case: zero length podcast

**Run Tests**:
```bash
python3 tests/test_admin_podcasts.py
```

**Test Features**:
- Comprehensive role-based access control testing
- Full CRUD operation validation
- Edge cases for URLs, file sizes, and durations
- Soft delete and reactivation verification
- All error cases and validation rules

---

## Past Papers Management

### 1. Get Past Papers for Paper

**Endpoint**: `POST /admin/past_papers`

**Auth**: Admin or Owner

**Description**: Get all past papers (active and inactive) for a specific paper, including paper context information.

**Request Body**:
```json
{
  "token": "session_token",
  "paper_id": "uuid"
}
```

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Past papers fetched successfully",
  "data": {
    "paper": {
      "id": "uuid",
      "course_id": "uuid",
      "name": "Paper 1",
      "code": "P1",
      "percentage_of_grade": 40.00,
      "course_title": "GCSE Biology",
      "subject_name": "Biology",
      "year_name": "GCSE (10/11)"
    },
    "past_papers": [
      {
        "id": "uuid",
        "paper_id": "uuid",
        "year": 2024,
        "url": "https://storage.lockin.tech/past_papers/2024-p1.pdf",
        "file_size": 2097152,
        "is_active": true,
        "added_by_user_id": "uuid",
        "added_by_username": "admin_user",
        "created_at": "2025-01-01T12:00:00.000000"
      }
    ],
    "past_papers_count": 5,
    "active_past_papers_count": 4
  }
}
```

**Error Response** (404 Not Found):
```json
{
  "success": false,
  "message": "Paper not found"
}
```

**Database Queries**: 2
1. Verify paper exists + get context (with course/subject/year info)
2. Fetch all past papers for paper (with LEFT JOIN for added_by user info)

---

### 2. Create Past Paper

**Endpoint**: `POST /admin/past_papers/create`

**Auth**: Admin or Owner

**Description**: Create a new past paper for a specific paper. Automatically records the admin who created it.

**Request Body**:
```json
{
  "token": "session_token",
  "paper_id": "uuid",
  "year": 2024,                       // Year as integer (e.g., 2024, 2023)
  "url": "https://storage.lockin.tech/past_papers/2024-p1.pdf",
  "file_size": 2097152                // Optional: file size in bytes
}
```

**Validation**:
- `paper_id`: Required, must be valid UUID of existing paper
- `year`: Required, must be valid integer (e.g., 2024)
- `url`: Required, non-empty string (URL to past paper file)
- `file_size`: Optional, must be >= 0 if provided

**Success Response** (201 Created):
```json
{
  "success": true,
  "message": "Past paper created successfully",
  "data": {
    "past_paper": {
      "id": "uuid",
      "paper_id": "uuid",
      "year": 2024,
      "url": "https://storage.lockin.tech/past_papers/2024-p1.pdf",
      "file_size": 2097152,
      "is_active": true,
      "added_by_user_id": "uuid",
      "created_at": "2025-01-01T12:00:00.000000"
    },
    "paper": {
      "name": "Paper 1",
      "course_title": "GCSE Biology"
    }
  }
}
```

**Error Responses**:

*400 Bad Request* - Missing or invalid fields:
```json
{
  "success": false,
  "message": "Missing required field: year"
}
```

*400 Bad Request* - Invalid year format:
```json
{
  "success": false,
  "message": "year must be a valid integer (e.g., 2024)"
}
```

*404 Not Found* - Paper doesn't exist:
```json
{
  "success": false,
  "message": "Paper not found or inactive"
}
```

**Database Queries**: 2
1. Verify paper exists
2. Insert past paper with RETURNING clause

---

### 3. Update Past Paper

**Endpoint**: `PUT /admin/past_papers/update`

**Auth**: Admin or Owner

**Description**: Update past paper details. Any combination of fields can be updated. Supports soft delete/reactivation via `is_active` field.

**Request Body**:
```json
{
  "token": "session_token",
  "past_paper_id": "uuid",
  "year": 2025,                       // Optional
  "url": "https://new-url.com/paper.pdf", // Optional
  "file_size": 3145728,               // Optional
  "is_active": false                  // Optional: soft delete
}
```

**Validation**:
- `past_paper_id`: Required, must be valid UUID of existing past paper
- At least one field to update must be provided
- `year`: Must be valid integer if provided
- `file_size`: Must be >= 0 if provided

**Success Response** (200 OK):
```json
{
  "success": true,
  "message": "Past paper updated successfully",
  "data": {
    "past_paper": {
      "id": "uuid",
      "paper_id": "uuid",
      "year": 2025,
      "url": "https://new-url.com/paper.pdf",
      "file_size": 3145728,
      "is_active": false,
      "added_by_user_id": "uuid",
      "created_at": "2025-01-01T12:00:00.000000"
    }
  }
}
```

**Error Responses**:

*400 Bad Request* - No fields to update:
```json
{
  "success": false,
  "message": "No fields to update"
}
```

*400 Bad Request* - Invalid field value:
```json
{
  "success": false,
  "message": "year must be a valid integer"
}
```

*404 Not Found* - Past paper doesn't exist:
```json
{
  "success": false,
  "message": "Past paper not found"
}
```

**Database Queries**: 2
1. Verify past paper exists
2. Dynamic UPDATE with only provided fields, using RETURNING clause

**Use Cases**:
- Update year after correction
- Change URL when moving to new storage
- Update file size after re-processing
- Soft delete: `{"is_active": false}`
- Reactivate: `{"is_active": true}`

---

### 4. Delete Past Paper

**Endpoint**: `DELETE /admin/past_papers/delete`

**Auth**: Admin or Owner

**Description**: Two-stage delete process for past papers. First call deactivates (soft delete), second call permanently removes from database.

**Request Body**:
```json
{
  "token": "session_token",
  "past_paper_id": "uuid"
}
```

**First Call Response** (200 OK - Soft Delete):
```json
{
  "success": true,
  "message": "Past paper deactivated successfully",
  "data": {
    "past_paper_id": "uuid",
    "year": 2024,
    "is_active": false,
    "note": "Call delete again to permanently remove from database. To reactivate, use the update endpoint with is_active: true."
  }
}
```

**Second Call Response** (200 OK - Permanent Delete):
```json
{
  "success": true,
  "message": "Past paper permanently removed from database",
  "data": {
    "past_paper_id": "uuid",
    "year": 2024,
    "note": "Past paper has been permanently deleted from the database. This action cannot be reversed."
  }
}
```

**Error Response** (404 Not Found):
```json
{
  "success": false,
  "message": "Past paper not found"
}
```

**Implementation Notes**:
- **Two-stage delete** - requires two explicit calls
- **First call**: Sets `is_active = false` (soft delete)
- **Second call**: Permanently deletes record from database
- Can be reactivated after soft delete using update endpoint
- Does not affect the paper or other content

**Database Queries**: 1 per call (optimized)
- Single UPDATE or DELETE with RETURNING clause

---

### Past Papers Management Tests

**Test Coverage** (29/29 passing):
- ✅ Authentication & authorization (regular blocked, admin/owner allowed)
- ✅ Create past paper with all fields
- ✅ Create past paper without optional fields (file_size)
- ✅ Missing required fields validation (year, url)
- ✅ Invalid paper_id handling
- ✅ Invalid file_size (negative) validation
- ✅ Get past papers for valid paper
- ✅ Get past papers for invalid paper
- ✅ Verify ordering by year DESC
- ✅ Update year only
- ✅ Update multiple fields
- ✅ Deactivate past paper (soft delete via update)
- ✅ Reactivate past paper
- ✅ Update with no fields (validation)
- ✅ Update non-existent past paper
- ✅ Soft delete past paper
- ✅ Verify soft-deleted past paper can be reactivated
- ✅ Delete non-existent past paper
- ✅ Edge case: very long URL (2000+ chars)
- ✅ Edge case: large file size (1GB)
- ✅ Edge case: historical year (1990)
- ✅ Edge case: zero file size

**Run Tests**:
```bash
python3 tests/test_admin_past_papers.py
```

**Test Features**:
- Comprehensive role-based access control testing
- Full CRUD operation validation
- Edge cases for URLs, file sizes, and years
- Soft delete and reactivation verification
- All error cases and validation rules

---

### Two-Stage Delete Comprehensive Tests

**Test Suite**: `/tests/test_admin_two_stage_delete.py`

**Description**: Comprehensive test suite that validates the two-stage delete behavior across all applicable admin endpoints. Ensures consistency and safety of the delete process.

**Test Coverage** (25/25 passing):
- ✅ Years two-stage delete (create → soft delete → permanent delete → 404)
- ✅ Subjects two-stage delete (create → soft delete → permanent delete → 404)
- ✅ Courses two-stage delete (create → soft delete → permanent delete → 404)
- ✅ Topics two-stage delete (create → soft delete → permanent delete → 404)
- ✅ Notes two-stage delete (create → soft delete → permanent delete → 404)
- ✅ Podcasts two-stage delete (create → soft delete → permanent delete → 404)
- ✅ Past Papers two-stage delete (create → soft delete → permanent delete → 404)

**What Each Test Validates**:
1. **First Delete Call**: 
   - Returns 200 OK
   - Sets `is_active = false`
   - Returns note: "Call delete again to permanently remove"
   
2. **Second Delete Call**:
   - Returns 200 OK
   - Permanently removes from database
   - Returns note: "Permanently removed from database"
   
3. **Third Delete Call**:
   - Returns 404 Not Found
   - Confirms record no longer exists

**Run Tests**:
```bash
python3 tests/test_admin_two_stage_delete.py
```

**Test Features**:
- Tests complete delete flow for all 7 applicable endpoints
- Validates response messages and data structures
- Confirms database state after each operation
- Ensures consistency across all endpoints
- All 25 tests passing ✓

**Manual Setup Required**:
- Test creates an admin user
- Requires manual SQL command to set admin role (displayed during test run)
- Press Enter after running SQL command to continue

---

## Future Admin Endpoints

The following admin endpoints are planned for future implementation:

### Content Management
- ✅ Years (4 endpoints) - COMPLETE
- ✅ Subjects (4 endpoints) - COMPLETE
- ✅ Courses (5 endpoints) - COMPLETE
- ✅ Papers (5 endpoints) - COMPLETE with is_active field
- ✅ Topics (5 endpoints) - COMPLETE
- ✅ Questions (5 endpoints) - COMPLETE
- ✅ Notes (4 endpoints) - COMPLETE
- ✅ Podcasts (4 endpoints) - COMPLETE
- ✅ Past Papers (4 endpoints) - COMPLETE

### Analytics
- Stats Overview (dashboard metrics)
- Content Statistics (by course/subject)

See `ADMIN_API_PLAN.md` for complete implementation plan.

---

## Support

For issues or questions regarding admin endpoints:
1. Check this documentation
2. Review test suite examples
3. Consult `ADMIN_API_PLAN.md` for implementation details
4. Check regular user docs in `backend_documentation.txt`

